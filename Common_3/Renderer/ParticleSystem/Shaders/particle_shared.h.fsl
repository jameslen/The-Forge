/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
#ifndef _PARTICLE_SHARED_H
#define _PARTICLE_SHARED_H

#include "particle_defs.h.fsl"

RES(RWBuffer(uint), BitfieldBuffer, UPDATE_FREQ_NONE, u53, binding = 10);
RES(RWBuffer(ParticleData), ParticlesDataBuffer, UPDATE_FREQ_NONE, u52, binding = 11);

RES(RWBuffer(ParticleBufferStateData), ParticleBufferState, UPDATE_FREQ_NONE, u55, binding = 12);

// For each particle set, y tells whether it is visible, x if it was visible in the last frame
RES(RWBuffer(uint), ParticleSetVisibility, UPDATE_FREQ_NONE, u57, binding = 14);

/** Indirect data to send to the rasterizer for big particles

    typedef struct IndirectDrawArguments
    {
        uint32_t mVertexCount;
        uint32_t mInstanceCount;
        uint32_t mStartVertex;
        uint32_t mStartInstance;
    } IndirectDrawArguments;
*/
RES(RWBuffer(uint), ParticleRenderIndirectData, UPDATE_FREQ_NONE, u60, binding = 25);

// Indices of the particles to be rasterized by the hardware rasterizer
RES(RWBuffer(uint), ParticlesToRasterize, UPDATE_FREQ_NONE, u68, binding = 16);

// Array of textures for each particle set
RES(Tex2D(float4), ParticleTextures[MAX_PARTICLE_TEXTURES_COUNT], UPDATE_FREQ_NONE, t59, binding = 27);

RES(Tex2D(float), DepthBuffer, UPDATE_FREQ_NONE, t69, binding = 20);
RES(SamplerState, NearestClampSampler, UPDATE_FREQ_NONE, s0, binding = 21);
RES(SamplerState, LinearClampSampler, UPDATE_FREQ_NONE, s1, binding = 22);

// Per pixel linked list for sorting transparent pixels
RES(RWBuffer(PackedParticleTransparencyNode), TransparencyList, UPDATE_FREQ_NONE, u66, binding = 23);
RES(RWBuffer(uint), TransparencyListHeads, UPDATE_FREQ_NONE, u67, binding = 26);

#if defined(_DEBUG)
RES(RWBuffer(ParticleSystemStats), StatsBuffer, UPDATE_FREQ_NONE, u69, binding = 24);
#endif


#endif
