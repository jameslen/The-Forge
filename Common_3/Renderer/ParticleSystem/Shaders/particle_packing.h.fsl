/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef PARTICLE_PACKING_H
#define PARTICLE_PACKING_H

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "particle_random.h.fsl"

// Utility macros to unpack particle set data
// Random interpolator
#define UnpackRandomInterpolator(seed)								randFloat_zeroToPlusOneFixedSeed(seed)			

/*****************************************/
// ParticleSet size and Particle scale
/*****************************************/
#define UnpackParticleSetSize(packedSize)							float3(unpack2Floats(packedSize.x).xy, unpack2Floats(packedSize.y).x)

																	// Interpolate between minimum and maximum size using a random t, then multiply by fade in and by fade out
#define UnpackParticleSize(particleSet, seed, ageOverMaxAge)		(lerp(unpack2Floats(particleSet.SpawnVolume.y).y, unpack2Floats(particleSet.MaxSizeAndSpeed).x, UnpackRandomInterpolator(seed)) \
																		* (lerp(unpack2Floats(particleSet.StartSizeAndTime).x, 1.0, saturate((ageOverMaxAge) / unpack2Floats(particleSet.StartSizeAndTime).y))) \
																		* (lerp(unpack2Floats(particleSet.EndSizeAndTime).x, 1.0, saturate((1.0 - (ageOverMaxAge)) / (1.0 - unpack2Floats(particleSet.EndSizeAndTime).y)))))

// Speed: we multiply the seed by 2 to avoid having a correlation between size and speed
#define UnpackSpeed(particleSet, seed)								lerp(unpack2Floats(particleSet.SteeringStrengthMinSpeed).y, unpack2Floats(particleSet.MaxSizeAndSpeed).y, UnpackRandomInterpolator(seed))

/*****************************************/
// Particle struct attributes
/*****************************************/
#define UnpackParticleAgeOverMaxAge(particleData)										(1.0 - unpack2Floats(particleData.VelocityAndAge.y).y)
#define UnpackParticleSpeedOverMaxSpeed(particleData, particleSet, minSpeed, maxSpeed)	((length(float3(unpack2Floats(particleData.VelocityAndAge.x), unpack2Floats(particleData.VelocityAndAge.y).x)) * maxSpeed - \
																							minSpeed) * (maxSpeed - minSpeed))
#define UnpackParticlePosition(particleSet, particleData)								(unpackFloat3FixedPoint(particleData.Position) * PARTICLE_PACKING_SCALE + particleSet.Position.xyz);

/*****************************************/
// Color
/*****************************************/
#define UnpackFadeValue(ageOverMaxAge, startColor, endColor)								(saturate((ageOverMaxAge) / max(0.01f, unpackUnorm4x8(startColor).w)) *	\
																								(saturate((1.0 - (ageOverMaxAge)) / max(0.01f, 1.0f - unpackUnorm4x8(endColor).w))))
#define UnpackParticleColorLifetime(startColor, endColor, ageOverMaxAge)					float4(lerp(unpackUnorm4x8(startColor).xyz, unpackUnorm4x8(endColor).xyz, ageOverMaxAge), \
																								UnpackFadeValue(ageOverMaxAge, startColor, endColor))
#define UnpackParticleColorSpeed(startColor, endColor, ageOverMaxAge, speedOverMaxSpeed)	float4(lerp(unpackUnorm4x8(startColor).xyz, unpackUnorm4x8(endColor).xyz, saturate(speedOverMaxSpeed)), \
																								UnpackFadeValue(ageOverMaxAge, startColor, endColor))
#define UnpackAlpha(particleSet, particleIdx)												lerp(unpackFloat2(particleSet.MinAndMaxAlpha).x * 256, unpackFloat2(particleSet.MinAndMaxAlpha).y * 256, UnpackRandomInterpolator(particleIdx))

/*****************************************/
// Animation
/*****************************************/
#define UnpackAnimationTilesX(particleSet)								(particleSet.AnimationTiling >> 16)
#define UnpackAnimationTilesY(particleSet)								(particleSet.AnimationTiling & 0xFFFFU)
#define UnpackAnimationFrameCount(particleSet)							(UnpackAnimationTilesX(particleSet) * UnpackAnimationTilesY(particleSet))
#define UnpackAnimationSpeed(particleSet)								(unpack2Floats(particleSet.Acceleration.y).y)

/*****************************************/
// Other
/*****************************************/
// Lights
#define UnpackLightModulationFactor(particleSet, time, particleIdx)		clamp(cos(unpack2Floats(particleSet.LightPulseSpeedAndOffset).x * float(time + particleIdx)) + unpack2Floats(particleSet.LightPulseSpeedAndOffset).y, 0.0, 1.0)

#define UnpackMaxParticles(particleSet)									ceil(particleSet.ParticlesPerSecond * particleSet.InitialAge)

#define UnpackPrimaryTextureIndex(particleSet)							(particleSet.TextureIndices >> 16)
#define UnpackSecondaryTextureIndex(particleSet)						(particleSet.TextureIndices & 0xFFFFU)



uint FirstBits(uint v, uint nBits)
{
	return v & ((1 << nBits)-1);
}

uint2 packFloat3FixedPoint(float3 v)
{
	const float maxVal = (1 << 20)-1;
	// Initialize to make sure everything is or-ed correctly
	uint3 vUint = uint3(0,0,0);
	
	for (uint i=0; i<3; i++)
	{
		// Absolute number after the point
		vUint[i] = uint(round(abs(v[i] * maxVal)));
		// Sign
		vUint[i] |= (v[i] > 0 ? (1 << 20) : 0);
	}

	// Layout of the output: [(21 bits of X - 11 bits of Y), (unused bit, remaining 10 bits of Y, 21 bits of Z)]
	return uint2((vUint.x << 11) | (vUint.y >> 10), ((vUint.y & ((1 << 10)-1)) << 21) | vUint.z);
}

float3 unpackFloat3FixedPoint(uint2 v)
{
	const float maxVal = (1 << 20)-1;
	// Layout of the input: [(21 bits of X - 11 bits of Y), (unused bit, remaining 10 bits of Y, 21 bits of Z)]
	uint3 vUint = uint3(0,0,0);
	vUint[0] = v.x >> 11;
	vUint[1] = ((v.x & (1 << 11)-1) << 10) | (v.y >> 21);
	vUint[2] = (v.y & (1 << 21)-1);
	
	// Rebuild the number: value * sign
	float3 ret;
	for (uint i=0; i<3; i++)
		ret[i] = (float(vUint[i] & ((1 << 20)-1)) / maxVal) * ((vUint[i] >> 20) > 0 ? 1 : -1);

	return ret;
}

uint packFloat2(float a, float b)
{
	uint aUint = asuint(a) >> 16;
	uint bUint = asuint(b) >> 16;

	return (aUint << 16) | bUint;
}

float2 unpackFloat2(uint v)
{
	uint aUint = v >> 16;
	uint bUint = v & ((1<<16)-1);

	return float2(asfloat(aUint << 16), asfloat(bUint << 16));
}

void UnpackParticle(ParticleSet particleSet, ParticleData particleData, out(float3) position, out(float4) velocityAndAge)
{
	position = unpackFloat3FixedPoint(particleData.Position);
	position.xyz *= PARTICLE_PACKING_SCALE;
	position.xyz += particleSet.Position.xyz;

	velocityAndAge.xy = unpack2Floats(particleData.VelocityAndAge.x);
	velocityAndAge.zw = unpack2Floats(particleData.VelocityAndAge.y);
	velocityAndAge.xyz *= unpack2Floats(particleSet.MaxSizeAndSpeed).y + 0.01;
	velocityAndAge.w *= particleSet.InitialAge;
}

ParticleData PackParticle(ParticleSet particleSet, float3 position, float4 velocityAndAge)
{
	ParticleData ret;
	position.xyz -= particleSet.Position.xyz;
	position.xyz /= PARTICLE_PACKING_SCALE;

	velocityAndAge.xyz /= (unpack2Floats(particleSet.MaxSizeAndSpeed).y + 0.01);

	ret.Position = packFloat3FixedPoint(position);
	ret.VelocityAndAge = uint2(pack2Floats(velocityAndAge.x, velocityAndAge.y), pack2Floats(velocityAndAge.z, velocityAndAge.w / particleSet.InitialAge));

	return ret;
}

#endif
