/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "particle_shared.h.fsl"
#include "particle_sets.h.fsl"
#include "particle_packing.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
	DATA(FLAT(uint), Color, TEXCOORD1);
	DATA(FLAT(uint), TexIndex, TEXCOORD2);
};

VSOutput VS_MAIN( SV_VertexID(uint) vertexId, SV_InstanceID(uint) instanceId )
{
	INIT_MAIN;

	VSOutput result;
	result.Position = float4(0,0,0,0);
	result.TexCoord = float2(0,0);
	result.Color = 0;
	result.TexIndex = 0;

	uint particleIdx = ParticlesToRasterize[instanceId];

	uint Bitfield = BitfieldBuffer[particleIdx];
	ParticleData particleData = ParticlesDataBuffer[particleIdx];

	float4 VelocityAge;
	float3 position;

	uint particleSetIdx = Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK;
	UnpackParticle(ParticleSetsBuffer[particleSetIdx], particleData, position, VelocityAge);

	float scale = UnpackParticleSize(ParticleSetsBuffer[Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK], particleIdx, UnpackParticleAgeOverMaxAge(particleData));
	const float3 vertexPosCache_indexed[4] =
	{
		float3(-scale, -scale, 0.0f),
		float3(-scale,  scale, 0.0f),
		float3( scale,  scale, 0.0f),
		float3( scale, -scale, 0.0f),
	};

	const float2 vertexTexCache_indexed[4] =
	{
		float2(0.0f, 1.0f),
		float2(0.0f, 0.0f),
		float2(1.0f, 0.0f),
		float2(1.0f, 1.0f),
	};

	uint vertIndex;
	switch (vertexId)
	{
		case 0: 
		case 1: 
		case 2: vertIndex = vertexId; break;
		case 3: vertIndex = 2; break;
		case 4: vertIndex = 3; break;
		case 5: vertIndex = 0; break;
	}

	float3 right = getCol(ParticleConstantBuffer.ViewTransform, 0).xyz;
	float3 up = getCol(ParticleConstantBuffer.ViewTransform, 1).xyz;
	float3 forward = getCol(ParticleConstantBuffer.ViewTransform, 2).xyz;

	switch (Bitfield & PARTICLE_BITFIELD_BILLBOARD_MODE_BITS_MASK)
	{
		case PARTICLE_BITFIELD_BILLBOARD_MODE_SCREEN_ALIGNED:
		{
			float3 velocityViewSpace = mul(ParticleConstantBuffer.ViewTransform, float4(VelocityAge.xyz, 0.0)).xyz;

			result.Position.xyz = vertexPosCache_indexed[vertIndex].xyz;
			result.Position.xyz += dot(result.Position.xyz, velocityViewSpace) * velocityViewSpace * ParticleSetsBuffer[particleSetIdx].VelocityStretch;
			result.Position += 	mul(ParticleConstantBuffer.ViewTransform, float4(position, 1.0f));

		} break;
		case PARTICLE_BITFIELD_BILLBOARD_MODE_VELOCITY_ORIENTED:
		{
			up = normalize(VelocityAge.xyz);
			forward = float3(0.0f, 0.0f, 1.0f);
			right = cross(up, forward);
			forward = cross(up, right);
			float4x4 billboard = make_f4x4_cols(float4(right, 0), float4(up, 0), float4(forward, 0), float4(position, 1.0f));
			result.Position = mul(billboard, float4(vertexPosCache_indexed[vertIndex], 1.0));
			result.Position = mul(ParticleConstantBuffer.ViewTransform, result.Position);
		} break;
		case PARTICLE_BITFIELD_BILLBOARD_MODE_HORIZONTAL:
		{
			forward = float3(0.0f, 1.0f, 0.0f);
			up = float3(0.0f, 0.0f, 1.0f);
			right = float3(1.0f, 0.0f, 0.0f);
			float4x4 billboard = make_f4x4_cols(float4(right, 0), float4(up, 0), float4(forward, 0), float4(position, 1.0f));
			result.Position = mul(billboard, float4(vertexPosCache_indexed[vertIndex], 1.0));
			result.Position = mul(ParticleConstantBuffer.ViewTransform, result.Position);
		} break;
		default:
			break;
	}

	uint texIndex = (Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0 ? UnpackSecondaryTextureIndex(ParticleSetsBuffer[particleSetIdx]) : 
		UnpackPrimaryTextureIndex(ParticleSetsBuffer[particleSetIdx]);
	float2 tileOffset = float2(0,0);
	uint2 tileAmount = uint2(1,1);
	
	if ((Bitfield & PARTICLE_BITFIELD_HAS_COLLIDED) > 0)
	{
		uint frameIndex = uint(particleData.AnimationTime * UnpackAnimationFrameCount(ParticleSetsBuffer[particleSetIdx]));
		tileAmount = uint2(UnpackAnimationTilesX(ParticleSetsBuffer[particleSetIdx]), UnpackAnimationTilesY(ParticleSetsBuffer[particleSetIdx]));
		frameIndex = (Bitfield & PARTICLE_BITFIELD_LOOP_ANIMATION) > 0 ? (frameIndex % (tileAmount.x * tileAmount.y)) : clamp(frameIndex, uint(0), tileAmount.x * tileAmount.y);

		tileOffset = float2(frameIndex % tileAmount.x, frameIndex / tileAmount.x);
		tileOffset /= float2(tileAmount);
	}

	float ageOverMaxAge = UnpackParticleAgeOverMaxAge(particleData);
	float2 minMaxSpeed = float2(unpack2Floats(ParticleSetsBuffer[particleSetIdx].SteeringStrengthMinSpeed).y, unpack2Floats(ParticleSetsBuffer[particleSetIdx].MaxSizeAndSpeed).y);
	float speedOverMaxSpeed = UnpackParticleSpeedOverMaxSpeed(particleData, ParticleSetsBuffer[particleSetIdx], minMaxSpeed.x, minMaxSpeed.y);

	result.Position = mul(ParticleConstantBuffer.ProjTransform, result.Position);
	result.TexCoord = vertexTexCache_indexed[vertIndex] / float2(tileAmount) + tileOffset;
	result.Color = packUnorm4x8((ParticleSetsBuffer[particleSetIdx].ParticleSetBitfield & PARTICLE_BITFIELD_MODULATION_TYPE_LIFETIME) > 0 ?
		UnpackParticleColorLifetime(ParticleSetsBuffer[particleSetIdx].StartColor, ParticleSetsBuffer[particleSetIdx].EndColor, ageOverMaxAge) : 
		UnpackParticleColorSpeed(ParticleSetsBuffer[particleSetIdx].StartColor, ParticleSetsBuffer[particleSetIdx].EndColor, 
			ageOverMaxAge, pow(speedOverMaxSpeed, PARTICLE_COLOR_OVER_SPEED_STRENGTH)) * 
			float4(1,1,1,UnpackAlpha(ParticleSetsBuffer[particleSetIdx], particleIdx)));
	result.TexIndex = texIndex;

	RETURN(result);
}
