/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "particle_shared.h.fsl"
#include "particle_sets.h.fsl"
#include "particle_packing.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
	// First 16 bits: age over max age, last 16 bits: speed over max speed
	DATA(FLAT(uint), Modulator, TEXCOORD1);
	// First bit: modulation type, remaining 31 bits: particle set index
	DATA(FLAT(uint), ParticleSetIndexModulationType, TEXCOORD2);
};

VSOutput VS_MAIN( SV_VertexID(uint) vertexId, SV_InstanceID(uint) instanceId )
{
	INIT_MAIN;

	VSOutput result;
	result.Position = float4(0,0,0,0);
	result.TexCoord = float2(0,0);
	result.Modulator = 0;
	result.ParticleSetIndexModulationType = 0;

	uint particleIdx = ParticlesToRasterize[instanceId];

	uint Bitfield = BitfieldBuffer[particleIdx];
	ParticleData particleData = ParticlesDataBuffer[particleIdx];

	float4 VelocityAge;
	float3 position;

	UnpackParticle(GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK), particleData, position, VelocityAge);

	float scale = UnpackParticleSize(GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK), particleIdx, UnpackParticleAgeOverMaxAge(particleData));
	const float3 vertexPosCache_indexed[4] =
	{
		float3(-scale, -scale, 0.0f),
		float3(-scale,  scale, 0.0f),
		float3( scale,  scale, 0.0f),
		float3( scale, -scale, 0.0f),
	};

	const float2 vertexTexCache_indexed[4] =
	{
		float2(0.0f, 1.0f),
		float2(0.0f, 0.0f),
		float2(1.0f, 0.0f),
		float2(1.0f, 1.0f),
	};

	const float3 vertexPosCache[6] =
	{
		vertexPosCache_indexed[0],
		vertexPosCache_indexed[1],
		vertexPosCache_indexed[2],
		vertexPosCache_indexed[2],
		vertexPosCache_indexed[3],
		vertexPosCache_indexed[0],
	};

	const float2 vertexTexCache[6] =
	{
		vertexTexCache_indexed[0],
		vertexTexCache_indexed[1],
		vertexTexCache_indexed[2],
		vertexTexCache_indexed[2],
		vertexTexCache_indexed[3],
		vertexTexCache_indexed[0],
	};

	float4 offset = float4(vertexPosCache[vertexId], 1.0f);
	uint billboardMode = Bitfield & PARTICLE_BITFIELD_BILLBOARD_MODE_BITS_MASK;

	float3 right = getCol(ParticleConstantBuffer.ViewTransform, 0).xyz;
	float3 up = getCol(ParticleConstantBuffer.ViewTransform, 1).xyz;
	float3 forward = getCol(ParticleConstantBuffer.ViewTransform, 2).xyz;

	switch (billboardMode)
	{
		case PARTICLE_BITFIELD_BILLBOARD_MODE_SCREEN_ALIGNED:
		{
			result.Position = mul(ParticleConstantBuffer.ViewTransform, float4(position, 1.0f));
			result.Position.xyz += vertexPosCache[vertexId].xyz;
		} break;
		case PARTICLE_BITFIELD_BILLBOARD_MODE_VELOCITY_ORIENTED:
		{
			up = normalize(VelocityAge.xyz);
			forward = float3(0.0f, 0.0f, 1.0f);
			right = cross(up, forward);
			forward = cross(up, right);
			float4x4 billboard = make_f4x4_cols(float4(right, 0), float4(up, 0), float4(forward, 0), float4(position, 1.0f));
			result.Position = mul(billboard, offset);
			result.Position = mul(ParticleConstantBuffer.ViewTransform, result.Position);
		} break;
		case PARTICLE_BITFIELD_BILLBOARD_MODE_HORIZONTAL:
		{
			forward = float3(0.0f, 1.0f, 0.0f);
			up = float3(0.0f, 0.0f, 1.0f);
			right = float3(1.0f, 0.0f, 0.0f);
			float4x4 billboard = make_f4x4_cols(float4(right, 0), float4(up, 0), float4(forward, 0), float4(position, 1.0f));
			result.Position = mul(billboard, offset);
			result.Position = mul(ParticleConstantBuffer.ViewTransform, result.Position);
		} break;
		default:
			break;
	}

	result.Position = mul(ParticleConstantBuffer.ProjTransform, result.Position);
	result.TexCoord = vertexTexCache[vertexId];
	result.Modulator = pack2Floats(UnpackParticleAgeOverMaxAge(particleData), UnpackParticleSpeedOverMaxSpeed(particleData, GetParticleSet(Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK)));
	result.ParticleSetIndexModulationType = (Bitfield & 0xFF) | ((Bitfield & PARTICLE_MODULATION_TYPE_LIFETIME) > 0 ? 1 << 31 : 0);

	RETURN(result);
}
