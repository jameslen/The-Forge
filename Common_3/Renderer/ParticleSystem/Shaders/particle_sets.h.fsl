/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef PARTICLE_SETS_H
#define PARTICLE_SETS_H

#include "particle_defs.h.fsl"
#include "../../../Graphics/ShaderUtilities.h.fsl"

ParticleSet GetParticleSet(uint idx)
{
	const float gSteeringStrength = 1.0f;
	const float gBoidsSeek = 1.0f;
	const float gBoidsAvoid = 0.25f;
	const float gBoidsFlee = 0.0f;
	const float gBoidsSeparation = 0.5f;
	const float gBoidsCohesion = 1.0f;
	const float gBoidsAlignment = 1.0f;

	ParticleSet swarm;
	swarm.Position = float3(8,6,11);
	swarm.ParticleSetBitfield = PARTICLE_BITFIELD_TYPE_FIREFLIES_BOIDS | PARTICLE_BITFIELD_LIGHTING_MODE_NONE | PARTICLE_MODULATION_TYPE_SPEED;
	swarm.MaxParticles = 1000000;
#if defined(AUTOMATED_TESTING)
	swarm.ParticlesPerSecond = 400000;
	swarm.InitialAge = 2.5;
#else
	swarm.ParticlesPerSecond = 100000;
	swarm.InitialAge = 10.0;
#endif
	swarm.BoidsAvoidSeekStrength = pack2Floats(gBoidsAvoid, gBoidsSeek);
	swarm.BoidsCohesionAlignmentStrength = pack2Floats(gBoidsCohesion, gBoidsAlignment);
	swarm.BoidsSeparationFleeStrength = pack2Floats(gBoidsSeparation, gBoidsFlee);
	swarm.SteeringStrengthMaxSpeed = pack2Floats(gSteeringStrength, 1.0f);
	swarm.Size = uint2(pack2Floats(1, 1), pack2Floats(1, 0.001));
	swarm.MaxSizeAndSpeed = pack2Floats(0.014, 0.5);
	swarm.LightRadiusAndVelocityNoise = 0;
	swarm.StartSizeAndTime = pack2Floats(0.0, 0.3);
	swarm.EndSizeAndTime = pack2Floats(0.0, 0.7);

	ParticleSet lightSet;
	lightSet.ParticleSetBitfield = PARTICLE_BITFIELD_TYPE_FIREFLIES | PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT | PARTICLE_MODULATION_TYPE_LIFETIME;
	lightSet.StartColor = packUnorm4x8(float4(1.0, 1.0, 0.2, 0.1));
	lightSet.EndColor = packUnorm4x8(float4(1.0, 0.2, 0.0, 0.9));
	lightSet.SteeringStrengthMaxSpeed = pack2Floats(gSteeringStrength, 0.05);
	lightSet.InitialAge = 10.0;
	lightSet.LightRadiusAndVelocityNoise = pack2Floats(LIGHT_SIZE, 0.01);
	lightSet.LightPulseSpeedAndOffset = pack2Floats(0.1, 0.5);
	lightSet.Size = uint2(pack2Floats(10, 6), pack2Floats(8, 0.002));
	lightSet.Position = float3(2, 8, 5);
	lightSet.MaxSizeAndSpeed = pack2Floats(0.15, 0.25);
	lightSet.MaxParticles = LIGHT_ONLY_COUNT;
	lightSet.ParticlesPerSecond = LIGHT_ONLY_COUNT / lightSet.InitialAge;
	lightSet.StartSizeAndTime = pack2Floats(0.0, 0.1);
	lightSet.EndSizeAndTime = pack2Floats(0.0, 0.9);

	switch (idx)
	{
		case 0:
		{
			swarm.Position = float3(6,6,10);
			swarm.StartColor = packUnorm4x8(float4(1.0, 0.1, 0.0, 0.2));
			swarm.EndColor = packUnorm4x8(float4(1.0, 0.1, 0.0, 0.8));
			swarm.Size = uint2(pack2Floats(4, 4), pack2Floats(4, 0.001));
			return swarm;
		}
		case 1:
		{
			swarm.Position = float3(-6, 6, 10);
			swarm.StartColor = packUnorm4x8(float4(0.5, 1.0, 0.0, 0.1));
			swarm.EndColor = packUnorm4x8(float4(0.5, 1.0, 0.0, 0.9));
			swarm.SteeringStrengthMaxSpeed = pack2Floats(0.5, 1.0f);
			return swarm;
		}
		case 2:
		{
			swarm.Position = float3(6,6,-2);
			swarm.SteeringStrengthMaxSpeed = pack2Floats(0.5, 1.0f);
			swarm.StartColor = packUnorm4x8(float4(0.8, 1.0, 0.0, 0.2));
			swarm.EndColor = packUnorm4x8(float4(0.8, 1.0, 0.0, 0.8));
			return swarm;
		}
		case 3:
		{
			swarm.Position = float3(-6,6,-2);
			swarm.StartColor = packUnorm4x8(float4(1.0, 1.0, 0.5, 0.1));
			swarm.EndColor = packUnorm4x8(float4(1.0, 1.0, 0.5, 0.9));
			swarm.SteeringStrengthMaxSpeed = pack2Floats(0.5, 1.0f);
			return swarm;
		}
		case 4:
		{
			return lightSet;
		}
		case 5:
		{
			swarm.Position = float3(4, 3, 4);
			swarm.StartColor = packUnorm4x8(float4(1.0, 0.5, 0.8, 0.3));
			swarm.EndColor = packUnorm4x8(float4(0.6, 0.1, 0.1, 0.8));
			swarm.ParticleSetBitfield = PARTICLE_BITFIELD_TYPE_FIREFLIES | PARTICLE_MODULATION_TYPE_LIFETIME;
			swarm.MaxParticles = 40;
			swarm.ParticlesPerSecond = 2;
			swarm.InitialAge = 20.0;
			swarm.SteeringStrengthMaxSpeed = pack2Floats(0, 0.05f);
			swarm.Size = uint2(pack2Floats(4, 1), pack2Floats(4, 1.5));
			swarm.MaxSizeAndSpeed = pack2Floats(2.0, 0.1);
			swarm.StartSizeAndTime = pack2Floats(0.75, 0.2);
			swarm.EndSizeAndTime = pack2Floats(0.75, 0.8);
			return swarm;
		}
		case 6:
		{
			swarm.Position = float3(8, 3, 4);
			swarm.StartColor = packUnorm4x8(float4(0.0, 0.0, 1.0, 0.3));
			swarm.EndColor = packUnorm4x8(float4(0.0, 1.0, 0.5, 0.8));
			swarm.ParticleSetBitfield = PARTICLE_BITFIELD_TYPE_FIREFLIES | PARTICLE_MODULATION_TYPE_LIFETIME;
			swarm.MaxParticles = 40;
			swarm.ParticlesPerSecond = 2;
			swarm.InitialAge = 20.0;
			swarm.SteeringStrengthMaxSpeed = pack2Floats(0, 0.05f);
			swarm.Size = uint2(pack2Floats(4, 1), pack2Floats(4, 1.5));
			swarm.MaxSizeAndSpeed = pack2Floats(2.0, 0.1);
			swarm.StartSizeAndTime = pack2Floats(0.75, 0.2);
			swarm.EndSizeAndTime = pack2Floats(0.75, 0.8);
			return swarm;
		}
		default:
		{
			ParticleSet shadowCasting = lightSet;
			shadowCasting.Position = float3(5,7,5);
			shadowCasting.ParticleSetBitfield = PARTICLE_BITFIELD_TYPE_FIREFLIES | PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW;
			shadowCasting.StartColor = packUnorm4x8(float4(0.8, 1.0, 0.1, 0.2));
			shadowCasting.EndColor = packUnorm4x8(float4(0.8, 1.0, 0.1, 0.8));
			shadowCasting.MaxParticles = SHADOW_COUNT;
			shadowCasting.LightRadiusAndVelocityNoise = pack2Floats(SHADOW_PARTICLE_RADIUS, 0.0);
			shadowCasting.ParticlesPerSecond = float(SHADOW_COUNT) / 10.0;
			shadowCasting.InitialAge = 10.0;
			shadowCasting.Size = uint2(pack2Floats(10, 6), pack2Floats(8, 0.1));
			shadowCasting.SteeringStrengthMaxSpeed = pack2Floats(gSteeringStrength, 1.0f);
			shadowCasting.LightPulseSpeedAndOffset = pack2Floats(0.0, 1.0);
			return shadowCasting;
		}
	}
}


#endif