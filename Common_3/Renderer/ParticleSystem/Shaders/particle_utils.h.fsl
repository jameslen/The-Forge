/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef PARTICLE_SIMULATE_H
#define PARTICLE_SIMULATE_H

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "particle_shared.h.fsl"
#include "particle_packing.h.fsl"

void SaveTransparencyEntry(uint2 screenSize, uint2 coords, float4 fragColor, float fragDepth)
{
	if (fragColor.w <= TRANSPARENCY_CONTRIBUTION_THRESHOLD)
		return;

	uint listIndex, bufferIndex;
	bufferIndex = coords.y * screenSize.x + coords.x;

	if (TransparencyListHeads[bufferIndex] >= MAX_TRANSPARENCY_LAYERS)
		return;

	AtomicAdd(TransparencyListHeads[bufferIndex], 1, listIndex);

	if (listIndex >= MAX_TRANSPARENCY_LAYERS)
		return;

	// Pack AOIT data
	PackedParticleTransparencyNode node;
	node.Depth = fragDepth;
	node.Color = packUnorm4x8(fragColor);

	TransparencyList[bufferIndex*MAX_TRANSPARENCY_LAYERS + listIndex] = node;
}

/* 
	Returns 0 if the particle is in the LIGHTNSHADOW section, 1 if in the LIGHT section, 2 otherwise
*/
uint GetCurrentBufferSection(uint particleIdx)
{
	if (particleIdx < MAX_SHADOW_COUNT)
		return 0;
	if (particleIdx < MAX_SHADOW_COUNT + MAX_LIGHT_COUNT)
		return 1;
	return 2;
}

uint GetBufferSectionFromBitfield(uint bitfield)
{
	if ((bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW) > 0)
		return 0;
	if ((bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0)
		return 1;
	return 2;
}

/*
	Swaps particle and bitfield entries at indices currIdx and swapIdx
	Returns the new bitfield, stores the new particle in outParticle
*/
uint SwapParticles(uint currBitfield, uint currIdx, uint swapIdx, inout(ParticleData) outParticle)
{
	// Swap particles
	uint bitfieldB = BitfieldBuffer[swapIdx];
	ParticleData particleA = ParticlesDataBuffer[currIdx];
	ParticleData particleB = ParticlesDataBuffer[swapIdx];

	ParticlesDataBuffer[currIdx] = particleB;
	ParticlesDataBuffer[swapIdx] = particleA;

	BitfieldBuffer[swapIdx] = currBitfield;
	BitfieldBuffer[currIdx] = bitfieldB;

	outParticle = particleB;
	return bitfieldB;
}



/* 
	Attempts nAttempts times to swap a particle with state isActive with a particle with state !isActive contained in 
		the same buffer lighting section (currBufferSection).
		Multiple attempts are needed because it could happen that a candidate particle to use for swapping has the same
		state as the one we want to swap (this happens when the particle buffer is fragmented).

	Returns true if the particle was swapped before nAttempts, false otherwise. When returning true, particleData
		contains the particle we swapped with and currBitfield contains its bitfield.
*/
bool TrySwappingActivity(bool isActive, uint currBufferSection, uint nAttempts, uint particleIdx, uint particleCount, 
	inout(uint) currBitfield, inout(ParticleData) particleData, bool wasAllocated)
{
	int sign = isActive ? 1 : -1;
	uint attemptCount = 0;

	uint currIdx;
	uint toSwapBitfield = currBitfield;
	uint setIndex = toSwapBitfield & PARTICLE_BITFIELD_SET_INDEX_MASK;
	uint prevSectionBound;

	switch (currBufferSection)
	{
		case 0: prevSectionBound = 0; break;
		case 1: prevSectionBound = MAX_SHADOW_COUNT; break;
		case 2: prevSectionBound = MAX_SHADOW_COUNT + MAX_LIGHT_COUNT; break;
	}

	do
	{
		// Get index to swap particle to
		AtomicAdd(ParticleBufferState[0].ParticleSectionsIndices[PREV_BOUND(currBufferSection)], sign, currIdx);
		if (sign*int(currIdx) < sign*int(ParticleBufferState[0].ParticleSectionsIndices[CURR_BOUND(currBufferSection)]) && currIdx >= prevSectionBound)
		{
			toSwapBitfield = BitfieldBuffer[currIdx];
			setIndex = toSwapBitfield & PARTICLE_BITFIELD_SET_INDEX_MASK;
			attemptCount++;

			if (isActive && (toSwapBitfield & PARTICLE_BITFIELD_IS_ALLOCATED) == 0 && wasAllocated)
				break;
		}
	}
	while (isActive == bool(ParticleSetVisibility[CURR_VISIBILITY(setIndex)]) &&										// Make sure the received particle has the right state
		sign*int(currIdx) < sign*int(ParticleBufferState[0].ParticleSectionsIndices[CURR_BOUND(currBufferSection)]) &&	// Don't read from the wrong section
		int(currIdx) >= prevSectionBound &&
		attemptCount < nAttempts);																						// Only try a certain amount of times

	if (bool(ParticleSetVisibility[CURR_VISIBILITY(setIndex)]) != isActive || ((isActive && (toSwapBitfield & PARTICLE_BITFIELD_IS_ALLOCATED) == 0) && wasAllocated))
	{
		currBitfield = SwapParticles(currBitfield, particleIdx, currIdx, particleData);
		return true;
	}
	
	if (sign*int(currIdx) >= sign*int(ParticleBufferState[0].ParticleSectionsIndices[CURR_BOUND(currBufferSection)]) || int(currIdx) < prevSectionBound)
		return true;

	return false;
}

/*
	Stores a particle and its bitfield in the particles / bitfield buffers, initializing the particles with 
		the attributes passed as arguments.
*/
void SaveParticle(ParticleSet particleSet, uint particleIdx, uint bitfield, float3 position, float age, float3 velocity, float animationTime)
{
	ParticleData particleData = PackParticle(particleSet, position, float4(velocity, age));
	particleData.AnimationTime = animationTime;
	particleData.Pad = 0;

	ParticlesDataBuffer[particleIdx] = particleData;
	BitfieldBuffer[particleIdx] = bitfield;
}


#endif // PARTICLE_SIMULATE_H
