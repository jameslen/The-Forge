/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "particle_shared.h.fsl"
#include "particle_sets.h.fsl"
#include "particle_utils.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
	// First 16 bits: age over max age, last 16 bits: speed over max speed
	DATA(FLAT(uint), Modulator, TEXCOORD1);
	// First bit: modulation type, remaining 31 bits: particle set index
	DATA(FLAT(uint), ParticleSetIndexModulationType, TEXCOORD2);
};

EARLY_FRAGMENT_TESTS
void PS_MAIN( VSOutput In )
{
	INIT_MAIN;

	uint bufferIdx = ParticleConstantBuffer.ScreenSize.x * uint(In.Position.y) + uint(In.Position.x);
	if (TransparencyListHeads[bufferIdx] >= MAX_TRANSPARENCY_LAYERS)
	{
		clip(-1);
	}

	float4 texColor;

	uint texIndex = In.ParticleSetIndexModulationType & ((1 << 31)-1);

	BeginNonUniformResourceIndex(texIndex, MAX_PARTICLE_SET_COUNT);
		texColor = SampleTex2D(ParticleTextures[texIndex], LinearClampSampler, In.TexCoord);
	EndNonUniformResourceIndex();

	if (texColor.w <= TRANSPARENCY_CONTRIBUTION_THRESHOLD)
	{
		clip(-1);
	}

	texColor = texColor * ((In.ParticleSetIndexModulationType >> 31) > 0 ? 
		UnpackParticleColorLifetime(GetParticleSet(texIndex).StartColor, GetParticleSet(texIndex).EndColor, unpack2Floats(In.Modulator).x) : 
		UnpackParticleColorSpeed(GetParticleSet(texIndex).StartColor, GetParticleSet(texIndex).EndColor, unpack2Floats(In.Modulator).x, pow(unpack2Floats(In.Modulator).y, PARTICLE_COLOR_OVER_SPEED_STRENGTH))); 

	SaveTransparencyEntry(ParticleConstantBuffer.ScreenSize, uint2(In.Position.xy), texColor, In.Position.z);
	clip(-1);
	RETURN();
}
