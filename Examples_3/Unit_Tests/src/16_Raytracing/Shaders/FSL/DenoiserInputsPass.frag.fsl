/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "Shared.fsl.h"

STRUCT(VSOutput)
{
	DATA(float4, position, SV_Position);
	DATA(float4, previousPosition, TEXCOORD0);
	DATA(float3, viewSpacePosition, TEXCOORD1);
	DATA(float3, worldSpaceNormal, TEXCOORD2);
};

RES(CBUFFER(ShadersConfigBlock), gSettings, UPDATE_FREQ_PER_FRAME, b0, binding = 0);

STRUCT(PSOut)
{
	DATA(float4, depthNormal,   SV_Target0);
	DATA(float2, motionVector,   SV_Target1);
};

PSOut PS_MAIN(VSOutput In)
{
	INIT_MAIN;
	float2 motionVector = f2(0.0f);
    
    // Compute motion vectors
    if (gSettings.mFrameIndex > 0)
	{
        // Map current pixel location to 0..1
		float2 uv = In.position.xy * gSettings.mRtInvSize;
        
        // Unproject the position from the previous frame then transform it from
        // NDC space to 0..1
        float2 prevUV = In.previousPosition.xy / In.previousPosition.w * float2(0.5f, -0.5f) + 0.5f;
        
        // Then the motion vector is simply the difference between the two
		motionVector = uv - prevUV;
    }
	
	PSOut Out;
	Out.depthNormal = float4(length(In.viewSpacePosition), normalize(In.worldSpaceNormal));
	Out.motionVector = motionVector;
	RETURN(Out);
}
