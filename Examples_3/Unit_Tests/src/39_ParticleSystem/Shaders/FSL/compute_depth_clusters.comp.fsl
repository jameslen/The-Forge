/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shader_defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

#include "light_cull_resources.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_sets.h.fsl"

NUM_THREADS(DEPTH_BOUNDS_GROUP_AMOUNT_X, DEPTH_BOUNDS_GROUP_AMOUNT_Y, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadInDispatch )
{
	INIT_MAIN;

	float2 windowSize = PerFrameVBConstants.cullingViewports[VIEW_CAMERA].windowSize;
	uint2 coords;
	uint clusterId = 0, depthBitmask = 0;

	// Each thread computes the bitmask for 4 neighboring pixels. Atomic operations are expensive, so in the best case we
	// only perform 1/4 of the operations in comparison to computing a bitmask per thread.
	UNROLL_N(DEPTH_ClUSTERS_KERNEL_SIZE)
	for (uint i=0; i<DEPTH_ClUSTERS_KERNEL_SIZE; i++)
	{
		UNROLL_N(DEPTH_ClUSTERS_KERNEL_SIZE)
		for (uint j=0; j<DEPTH_ClUSTERS_KERNEL_SIZE; j++)
		{
			coords = threadInDispatch.xy * DEPTH_ClUSTERS_KERNEL_SIZE + uint2(i, j);
			if (coords.x >= windowSize.x || coords.y >= windowSize.y)
			{
				continue;
			}
	
			float2 subclusterSize = windowSize / float2(LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT, LIGHT_CLUSTER_HEIGHT * HORIZONTAL_SUBCLUSTER_COUNT);
			uint2 subclusterCoords = uint2(float2(coords) / subclusterSize);
			coords.y = uint(windowSize.y) - coords.y;

			// Set default state
			uint currClusterId = subclusterCoords.y * LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT + subclusterCoords.x;
			if (currClusterId >= LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT * LIGHT_CLUSTER_HEIGHT * HORIZONTAL_SUBCLUSTER_COUNT)
			{
				continue;
			}

			// We might be at the edge of a cluster. In that case, we update the bitmask immediately and compute a new one
			if (currClusterId != clusterId && !(i == 0 && j == 0))
			{
				uint tmp;
				if (depthBitmask != 0)
					AtomicOr(DepthBoundsBuffer[clusterId * DEPTH_BOUNDS_ENTRY_SIZE+2], depthBitmask, tmp);
				
				depthBitmask = 0;
			}

			clusterId = currClusterId;

			float2 minMaxDepth;
			minMaxDepth.x = float(DepthBoundsBuffer[currClusterId * DEPTH_BOUNDS_ENTRY_SIZE]);
			minMaxDepth.y = float(DepthBoundsBuffer[currClusterId * DEPTH_BOUNDS_ENTRY_SIZE + 1]);
			minMaxDepth = (minMaxDepth / INT_MAX) * (CAMERA_FAR-CAMERA_NEAR) + CAMERA_NEAR;
	
			// Build bitmask
			float depth = linearizeDepthReverseZ(LoadTex2D(DepthBuffer, NO_SAMPLER, coords, 0).x, CAMERA_NEAR, CAMERA_FAR);
			depthBitmask = depthBitmask | (1 << GetDepthBitmaskIndex(minMaxDepth.x, minMaxDepth.y, depth));
		}
	}
	
	uint tmp;
	if (depthBitmask != 0)
		AtomicOr(DepthBoundsBuffer[clusterId * DEPTH_BOUNDS_ENTRY_SIZE+2], depthBitmask, tmp);
	
	RETURN();
}
