/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

STRUCT(ShadowRootConstantsData)
{
	DATA(uint, CubeIndex, None);
	DATA(uint, ParticleIndex, None);
};
RES(ROOT_CONSTANT(ShadowRootConstantsData), ShadowRootConstants, UPDATE_FREQ_NONE, b0, binding = 0);

#include "shader_defs.h.fsl"
#include "vb_resources.h.fsl"

#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_defs.h.fsl"

RES(Buffer(ParticleData), ParticlesDataBuffer, UPDATE_FREQ_NONE, t0, binding = 11);
RES(Buffer(uint), BitfieldBuffer, UPDATE_FREQ_NONE, t1, binding = 10);

#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_packing.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/particle_sets.h.fsl"

PsInShadowOpaque VS_MAIN( SV_VertexID(uint) vertexID )
{
	INIT_MAIN;
	PsInShadowOpaque Out;
	float4 vertexPos = LoadVertex(vertexID);

	if (ShadowRootConstants.CubeIndex < 1)
	{
		Out.position = mul(PerFrameVBConstants.transform[VIEW_SHADOW].mvp.mat, vertexPos);
	}
	else
	{
		uint Bitfield = BitfieldBuffer[ShadowRootConstants.ParticleIndex];
		if ((Bitfield & PARTICLE_BITFIELD_IS_ALIVE) < 1 || (Bitfield & PARTICLE_BITFIELD_IS_ALLOCATED) < 1)
		{
			Out.position = float4(0,0,0,0);
			RETURN(Out);
		}

		ParticleData p = ParticlesDataBuffer[ShadowRootConstants.ParticleIndex];
		float3 pos = UnpackParticlePosition(ParticleSetsBuffer[Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK], p);

		Out.position = mul(PerFrameVBConstants.transform[VIEW_SHADOW + ShadowRootConstants.CubeIndex].mvp.mat, float4(vertexPos.xyz - pos.xyz, 1.0f));
		Out.position.z = (1.0 - (length(vertexPos.xyz - pos.xyz) + 0.01) / (CAMERA_FAR - 0.01)) * Out.position.w;
	}

	RETURN(Out);
}
