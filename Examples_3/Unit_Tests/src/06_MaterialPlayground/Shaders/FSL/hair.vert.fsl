/*
*Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#define EPSILON 1e-7f

#if !defined(SHORT_CUT_RESOLVE_DEPTH) && !defined(SHORT_CUT_CLEAR) && !defined(SHORT_CUT_RESOLVE_COLOR) && !defined(HAIR_SHADOW) && !defined(SHORT_CUT_DEPTH_PEELING) && !defined(SHORT_CUT_FILL_COLOR)
#define HAIR_REGULAR
#endif
#include "hair.h.fsl"

float4 GetStrandColor(int index)
{
	float4 rootColor = float4(cbHair.RootColor >> 24, (cbHair.RootColor >> 16) & 0xFF, (cbHair.RootColor >> 8) & 0xFF, cbHair.RootColor & 0xFF) * (1.0f / 255.0f);
	float4 strandColor = float4(cbHair.StrandColor >> 24, (cbHair.StrandColor >> 16) & 0xFF, (cbHair.StrandColor >> 8) & 0xFF, cbHair.StrandColor & 0xFF) * (1.0f / 255.0f);

	float strandPos = (index % cbHair.NumVerticesPerStrand) / float(cbHair.NumVerticesPerStrand);
	float colorWeight = 1.0f - saturate(pow(1.0f - strandPos, cbHair.ColorBias));

	return lerp(rootColor, strandColor, colorWeight);
}

VSOutput VS_MAIN( SV_VertexID(uint) vertexID )
{
	INIT_MAIN;
	VSOutput Out;
	uint index = vertexID / 2;

	float3 v = GuideHairVertexPositions[index].xyz;
	float3 t = GuideHairVertexTangents[index].xyz;

	v = mul(cbHair.Transform, float4(v, 1.0f)).xyz;
	t = normalize(mul(cbHair.Transform, float4(t, 0.0f)).xyz);

	float3 right = normalize(cross(t, normalize(v - cbCamera.Pos)));
#if FT_MULTIVIEW
	float2 projRight = normalize(mul(cbCamera.VPMatrix[VR_VIEW_ID], float4(right, 0)).xy);
#else
	float2 projRight = normalize(mul(cbCamera.VPMatrix, float4(right, 0)).xy);
#endif

	float expandPixels = 0.71f;

	float thickness = HairThicknessCoefficients[index];

	float4 hairEdgePositions[2];
	hairEdgePositions[0] = float4(v + -right * thickness * cbHair.FiberRadius, 1.0f);
	hairEdgePositions[1] = float4(v + right * thickness * cbHair.FiberRadius, 1.0f);
#if FT_MULTIVIEW
	hairEdgePositions[0] = mul(cbCamera.VPMatrix[VR_VIEW_ID], hairEdgePositions[0]);
	hairEdgePositions[1] = mul(cbCamera.VPMatrix[VR_VIEW_ID], hairEdgePositions[1]);
#else
	hairEdgePositions[0] = mul(cbCamera.VPMatrix, hairEdgePositions[0]);
	hairEdgePositions[1] = mul(cbCamera.VPMatrix, hairEdgePositions[1]);
#endif

	float dir = (vertexID & 1) != 0 ? 1.0f : -1.0f;

	Out.Position = hairEdgePositions[vertexID & 1] + dir * float4(projRight * expandPixels / cbHairGlobal.Viewport.w, 0.0f, 0.0f) * hairEdgePositions[vertexID & 1].w;
	Out.Tangent = float4(t, thickness);
	Out.P0P1 = float4(hairEdgePositions[0].xy, hairEdgePositions[1].xy);
	Out.Color = GetStrandColor(int(index));
	Out.W0W1 = float2(hairEdgePositions[0].w, hairEdgePositions[1].w);
#if FT_MULTIVIEW
	Out.ViewID = VR_VIEW_ID;
#endif
	RETURN(Out);
}
