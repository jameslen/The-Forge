/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "skinning.h.fsl"

STRUCT(VSInput)
{
    DATA(float3, Position, POSITION);
    DATA(uint, Normal, NORMAL);
    DATA(uint, UV, TEXCOORD0);
    DATA(float4, BoneWeights, WEIGHTS);
    DATA(uint4, BoneIndices, JOINTS);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float3, Normal, NORMAL);
    DATA(float2, UV, TEXCOORD0);
};

VSOutput VS_MAIN(VSInput In)
{
    INIT_MAIN;
    VSOutput Out;

    float4x4 boneTransform = (boneMatrices.boneMatrix[In.BoneIndices[0]]) * In.BoneWeights[0];
    boneTransform += (boneMatrices.boneMatrix[In.BoneIndices[1]]) * In.BoneWeights[1];
    boneTransform += (boneMatrices.boneMatrix[In.BoneIndices[2]]) * In.BoneWeights[2];
    boneTransform += (boneMatrices.boneMatrix[In.BoneIndices[3]]) * In.BoneWeights[3];

    Out.Position = mul(boneTransform, float4(In.Position, 1.0f));
    Out.Position = mul(uniformBlock.modelMatrix, Out.Position);
#if FT_MULTIVIEW
    Out.Position = mul(uniformBlock.vpMatrix[VR_VIEW_ID], Out.Position);
#else
    Out.Position = mul(uniformBlock.vpMatrix, Out.Position);
#endif
    Out.Normal = normalize(mul(uniformBlock.modelMatrix, float4(decodeDir(unpackUnorm2x16(In.Normal)), 0.f)).xyz);
    Out.UV = unpack2Floats(In.UV);

    RETURN(Out);
}
