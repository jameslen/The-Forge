/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

STRUCT(uniformBlockData)
{
#if FT_MULTIVIEW
	DATA(float4x4, ProjectionViewMat[VR_MULTIVIEW_COUNT], None);
#else
	DATA(float4x4, ProjectionViewMat, None);
#endif
    DATA(float4x4, ModelMatrixCapsule, None);
    DATA(float4x4, ModelMatrixCube, None);
    DATA(float4x4, ModelMatrixOcclusion, None);
};
RES(CBUFFER(uniformBlockData), uniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 0);

STRUCT(VSInput)
{
    DATA(float4, Position, POSITION);
    DATA(uint, Normal, NORMAL);
	DATA(uint, TexCoords, TEXCOORD);
};

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
    DATA(float4, Diffuse, COLOR);
	DATA(float2, texcoords, TEXCOORD);
};

VSOutput VS_MAIN( VSInput In )
{
	INIT_MAIN;
	VSOutput Out;
	
	float3 lightPos = float3(15.0f,0.0f,0.0f);
	float3 lightCol = float3(1.0f,1.0f,1.0f);

#if FT_MULTIVIEW
    float4x4 tempMat = mul(uniformBlock.ProjectionViewMat[VR_VIEW_ID], uniformBlock.ModelMatrixCapsule);
#else
    float4x4 tempMat = mul(uniformBlock.ProjectionViewMat, uniformBlock.ModelMatrixCapsule);
#endif
    Out.Position = mul(tempMat, In.Position);

    float4 normal = normalize(mul(uniformBlock.ModelMatrixCapsule, float4(decodeDir(unpackUnorm2x16(In.Normal)), 0.0f))); // Assume uniform scaling
    float4 pos = mul(uniformBlock.ModelMatrixCapsule, float4(In.Position.xyz, 1.0f));

    float lightIntensity = 1.0f;
    float quadraticCoeff = 1.2;
    float ambientCoeff = 0.1;

    float3 lightDir;
	   
    lightDir = normalize(lightPos - pos.xyz);

    //float distance = length(lightDir);
    //float attenuation = 1.0 / (quadraticCoeff * distance * distance);
    //float intensity = lightIntensity * attenuation;

    float3 diffuse = f3(max(dot(normal.xyz, lightDir.xyz), 0.0));

	Out.texcoords = unpack2Floats(In.TexCoords);
    Out.Diffuse = float4(diffuse, 1.0);
	RETURN(Out);
}
