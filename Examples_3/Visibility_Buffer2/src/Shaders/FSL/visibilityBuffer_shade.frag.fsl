/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// USERMACRO: SAMPLE_COUNT [1,2,4]
// Uncomment this definition to use ray differentials method for calculating
// gradients instead of screen-space projected triangles method.
// #define USE_RAY_DIFFERENTIALS

#include "shading.h.fsl"
#include "../../../../../Common_3/Renderer/VisibilityBuffer2/Shaders/FSL/vb_shading_utilities.h.fsl"

#include "triangle_binning.h.fsl"

// This shader loads draw / triangle Id per pixel and reconstruct interpolated vertex data.

STRUCT(VSOutput)
{
	DATA(float4, position, SV_Position);
	DATA(float2, screenPos, TEXCOORD0);
};

// Static descriptors

#if SAMPLE_COUNT > 1
    RES(Tex2DMS(float, SAMPLE_COUNT), depthTex, UPDATE_FREQ_NONE, t100, binding = 15);
#else
    RES(Tex2D(float), depthTex, UPDATE_FREQ_NONE, t100, binding = 15);
#endif

RES(Tex2D(float), shadowMap, UPDATE_FREQ_NONE, t101, binding = 16);

#if defined(METAL) || defined(ORBIS) || defined(PROSPERO)
	RES(Tex2D(float4), diffuseMaps[INSTANCE_BUFFER_SIZE],  UPDATE_FREQ_NONE, t0, binding = 17);
	RES(Tex2D(float4), normalMaps[INSTANCE_BUFFER_SIZE],   UPDATE_FREQ_NONE, t1, binding = 17 + MAX_TEXTURE_UNITS);
	RES(Tex2D(float4), specularMaps[INSTANCE_BUFFER_SIZE], UPDATE_FREQ_NONE, t2, binding = 17 + MAX_TEXTURE_UNITS * 2);
#else
	RES(Tex2D(float4), diffuseMaps[INSTANCE_BUFFER_SIZE],  space4, t0, binding = 17);
	RES(Tex2D(float4), normalMaps[INSTANCE_BUFFER_SIZE],   space5, t0, binding = 17 + MAX_TEXTURE_UNITS);
	RES(Tex2D(float4), specularMaps[INSTANCE_BUFFER_SIZE], space6, t0, binding = 17 + MAX_TEXTURE_UNITS * 2);
#endif

RES(ByteBuffer, vertexPos,           UPDATE_FREQ_NONE, t10, binding=0);
RES(ByteBuffer, vertexTexCoord,      UPDATE_FREQ_NONE, t11, binding=1);
RES(ByteBuffer, vertexNormal,        UPDATE_FREQ_NONE, t12, binding=2);
RES(Buffer(uint), binBuffer, UPDATE_FREQ_PER_FRAME, t14, binding=4);

RES(Buffer(uint), indirectFilteredBatches, UPDATE_FREQ_PER_FRAME, t15, binding = 15);
RES(Buffer(MeshConstants), meshConstantsBuffer, UPDATE_FREQ_NONE, t17, binding=6);
RES(Buffer(LightData), lights,                  UPDATE_FREQ_NONE, t19, binding=11);

RES(ByteBuffer, lightClustersCount, UPDATE_FREQ_PER_FRAME, t20, binding=12);
RES(ByteBuffer, lightClusters,      UPDATE_FREQ_PER_FRAME, t21, binding=13);

RES(SamplerState, textureSampler, UPDATE_FREQ_NONE, s0, binding = 7);
RES(SamplerState, depthSampler, UPDATE_FREQ_NONE, s1, binding = 8);

RES(Buffer(uint64_t), visibilityBuffer, UPDATE_FREQ_PER_FRAME, t1, binding = 100);


RES(ByteBuffer, indexDataBuffer, UPDATE_FREQ_NONE, t2, binding = 4);

float4 PS_MAIN( VSOutput In, SV_SampleIndex(uint) i )
{
	INIT_MAIN;

	uint index = VisibilityBufferOffset(VIEW_CAMERA, PerFrameConstants.depthTexSize[0], In.position.x, In.position.y);
	uint64_t packedDepthVBId = visibilityBuffer[index];

	uint triangleData = 0;
	float depth = 0.0f;
	unpackDepthVBId(packedDepthVBId, depth, triangleData);
	uint triangleIndex = GetTriIndexFromTriData(triangleData);

	// Early exit if this pixel doesn't contain triangle data
	if (INVALID_TRIANGLE_DATA == triangleData)
	{
		discard;
	}

	if (false && In.position.y < 5000)
	{
		RETURN(float4((triangleData % 128) / 128.0f, (triangleData %32)/32.0f, depth*10, 1));
	}

	// Extract packed data
	uint batchID = GetBatchIdFromTriData(triangleData);
	uint alpha1_opaque0 = GetGeomSetFromTriData(triangleData);

	uint index0 = LoadByte(indexDataBuffer, (triangleIndex * 3 + 0) << 2);
	uint index1 = LoadByte(indexDataBuffer, (triangleIndex * 3 + 1) << 2);
	uint index2 = LoadByte(indexDataBuffer, (triangleIndex * 3 + 2) << 2);

	// Load vertex data of the 3 vertices
	float3 v0pos = asfloat(LoadByte4(vertexPos, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(vertexPos, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(vertexPos, index2 * 12)).xyz;

	// Transform positions to clip space
	float4 pos0 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].mvp, float4(v0pos, 1.0f));
	float4 pos1 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].mvp, float4(v1pos, 1.0f));
	float4 pos2 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].mvp, float4(v2pos, 1.0f));

	float4 wPos0 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP,pos0);
	float4 wPos1 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP,pos1);
	float4 wPos2 = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP,pos2);

	float2 two_over_windowsize = PerFrameConstants.twoOverRes;

	// Compute partial derivatives and baycentric coordinates.
	// This is necessary to interpolate triangle attributes per pixel.
#if defined(USE_RAY_DIFFERENTIALS)
	float4x4 projInv = InverseProjectionMatrixPerspectiveReverseZ(PerFrameVBConstants.transform[VIEW_CAMERA].projection);
	float4x4 viewInv = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP, PerFrameVBConstants.transform[VIEW_CAMERA].projection);
	BarycentricDeriv derivativesOut = CalcRayBary(wPos0.xyz, wPos1.xyz, wPos2.xyz, In.screenPos, PerFrameConstants.camPos.xyz, viewInv, projInv, two_over_windowsize);
#else
	BarycentricDeriv derivativesOut = CalcFullBary(pos0, pos1, pos2, In.screenPos, two_over_windowsize);
#endif /*USE_RAY_DIFFERENTIALS*/

	f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(vertexTexCoord, index0 << 2)) ,
			unpack2Floats(LoadByte(vertexTexCoord, index1 << 2)) ,
			unpack2Floats(LoadByte(vertexTexCoord, index2 << 2)) 
	);

	// Interpolated 1/w (one_over_w) for all three vertices of the triangle
	// using the barycentric coordinates and the delta vector
	float w = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	// Reconstruct the Z value at this screen point performing only the necessary matrix * vector multiplication
	// operations that involve computing Z
	float z = w * getElem(PerFrameVBConstants.transform[VIEW_CAMERA].projection, 2, 2) + getElem(PerFrameVBConstants.transform[VIEW_CAMERA].projection, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using In.screenPos and the computed Z value at this point.
	// Then, multiplying the perspective projected coordinates by the inverse view-projection matrix (invVP) produces world coordinates
	float3 position = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP, float4(In.screenPos * w, z, w)).xyz;

	// Get the material id from the per batch indirection data buffer. 
	uint materialID = meshConstantsBuffer[batchID].materialID;
	// uint batchData = indirectFilteredBatches[BATCH_DISPATCH_ARGUMENTS_OFFSET + batchID];
	// uint materialID = (batchData & MATERIAL_ID_MASK);

	// Interpolate texture coordinates and calculate the gradients for texture sampling with mipmapping support
	GradientInterpolationResults results = Interpolate2DWithDeriv(derivativesOut,texCoords);
	
	float2 texCoordDX = results.dx;
	float2 texCoordDY = results.dy;
	float2 texCoord = results.interp;

	// CALCULATE PIXEL COLOR USING INTERPOLATED ATTRIBUTES
	// Reconstruct normal map Z from X and Y
	// "NonUniformResourceIndex" is a "pseudo" function see
	// http://asawicki.info/news_1608_direct3d_12_-_watch_out_for_non-uniform_resource_index.html

	// Get textures from arrays.
	float4 normalMapData;
	float4 diffuseColor;
	float4 specularColor;
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapData = SampleGradTex2D(normalMaps[materialID],   textureSampler, texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(diffuseMaps[materialID],  textureSampler, texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(specularMaps[materialID], textureSampler, texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapData.ga * 2.0f - 1.0f;
	reconstructedNormalMap.z = sqrt(saturate(1.0f - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy)));

	// NORMAL INTERPOLATION
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(vertexNormal, index0 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(vertexNormal, index1 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(vertexNormal, index2 << 2)))
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivativesOut, normals));
	
	//Calculate pixel normal and tangent vectors
	f3x3 wPositions = make_f3x3_cols(
			wPos0.xyz,
			wPos1.xyz,
			wPos2.xyz
	);

	DerivativesOutput wPosDer = Cal3DDeriv(derivativesOut, wPositions);
	DerivativesOutput uvDer = { float3(results.dx, 0.0),  float3(results.dy, 0.0) };
	normal = perturb_normal(reconstructedNormalMap, normal, wPosDer, uvDer);
	
	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	float ao = calculateAoContrib(
		PerFrameConstants.depthTexSize,
		PerFrameConstants.aoIntensity,
		PerFrameConstants.aoQuality,
		PerFrameConstants.CameraPlane.y,
		PerFrameConstants.CameraPlane.x,
		PerFrameConstants.frustumPlaneSizeNormalized,
		In.position.xy,
		depthTex,
		depthSampler);

	bool isTwoSided = (alpha1_opaque0 == 1) && bool(meshConstantsBuffer[materialID].twoSided);
	float3 ViewVec = normalize(PerFrameConstants.camPos.xyz - position.xyz);
	float NoV = dot(normal, ViewVec);
	
	// if it is backface NoV should be < 0.0f 
	if (isTwoSided && NoV < 0.0f)
	{
		//flip normal
		normal = -normal;
		NoV = dot(normal, ViewVec);
	}

	float3 HalfVec = normalize(ViewVec - PerFrameConstants.lightDir.xyz);
	NoV = saturate(NoV);

	float NoL = dot(normal, -PerFrameConstants.lightDir.xyz);	

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	// calculate color contribution from specular lighting
	float3 F0 = f3(0.08); // 0.08 is the index of refraction
	float3 SpecularColor = lerp(F0, diffuseColor.rgb, Metallic);
	float3 DiffuseColor = lerp(diffuseColor.rgb, f3(0.0), Metallic);

	// Calculate Shadow Factor
	float4 posLS = mul(PerFrameVBConstants.transform[VIEW_SHADOW].vp, float4(position, 1.0f));
	float shadowFactor = calcESMShadowFactor(posLS, shadowMap, depthSampler, PerFrameConstants.esmControl);

	// Calculate Sun Illumation
	float3 shadedColor = PBR_shadowFactor(
					NoL, NoV, 
					ViewVec, HalfVec, normal, 
					DiffuseColor, SpecularColor, Roughness, Metallic, shadowFactor);
	shadedColor *= PerFrameConstants.lightColor.rgb * PerFrameConstants.lightColor.a * NoL * shadowFactor;

	if (PerFrameConstants.visualizeAo > 0)
		shadedColor = f3(ao);
	
	// point lights
	// Find the light cluster for the current pixel
	uint2 clusterCoords = uint2(floor((In.screenPos * 0.5f + 0.5f) * float2(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT)));
	uint numLightsInCluster = LoadByte(lightClustersCount, LIGHT_CLUSTER_COUNT_POS(clusterCoords.x, clusterCoords.y) << 2);

	// Accumulate light contributions
	for (uint j = 0; j < numLightsInCluster; ++j)
	{
		uint lightId = LoadByte(lightClusters, LIGHT_CLUSTER_DATA_POS(j, clusterCoords.x, clusterCoords.y) << 2);
		shadedColor += calcPointLightShade(
						NoV, 
						ViewVec, normal,
						DiffuseColor, SpecularColor, Roughness, Metallic,
						position, lights[lightId].position.xyz, lights[lightId].color.xyz, LIGHT_SIZE,
						isTwoSided);
	}

	float ambientIntencity = 0.05f * ao;
	float3 ambient = diffuseColor.rgb * ambientIntencity;

	float3 FinalColor = shadedColor + ambient;

	// debug bin occupancy overlay
	if(PerFrameConstants.visualizeBinOccupancy > 0)
	{
		float2 binCoord = float2(In.position.x / BIN_SIZE, In.position.y / BIN_SIZE);
		uint tx = uint(binCoord[0]);
		uint ty = uint(binCoord[1]);
		uint triangleCount = binBuffer[BinBufferViewOffset(VIEW_CAMERA) + TIDX(tx, ty)];
		float3 empty = float3(0, 1, 0), full = float3(1, 0, 0);
		float binOccupancy = triangleCount / float(TILE_CAPACITY);
		float3 occupancuVis = float3(binOccupancy, 1.0f - binOccupancy, 0);
		if ((abs(frac(binCoord.x) - 0.5f) > 0.495f) || (abs(frac(binCoord.y) - 0.5f) > 0.495f))
			binOccupancy = 0.75f;
		FinalColor.rgb = lerp(FinalColor.rgb, occupancuVis, binOccupancy);
		if (binOccupancy >= 1.0f)
			FinalColor.rgb = float3(1, 0, 1);
	}

	RETURN(float4(FinalColor, 1.0));
}
